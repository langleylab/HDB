% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/density.R
\name{boxDensity}
\alias{boxDensity}
\title{Greedy plaid covering
Estimate the hypercube side and regions that cover an n-dimensional point set}
\usage{
boxDensity(points, k = NULL, alpha = 0.1, verbose = FALSE)
}
\arguments{
\item{points}{matrix, a cell x coordinates matrix of cell embeddings}

\item{k}{numeric, the target number of hypercubes/boxes to use for plaid covering}

\item{alpha}{numeric, the tolerance on the final number of boxes given as
fraction of k}

\item{verbose}{logical, should the function print messages on the progress?
Default is `FALSE`.}
}
\value{
a list containing two elements: `boxes`, a data.frame containing the
   assignment of each cell to a hypercube, and `hypercube_side` the length
   of the side of the hyperbcube.
}
\description{
Greedy plaid covering
Estimate the hypercube side and regions that cover an n-dimensional point set
}
\details{
This algorithm was originally implemented by Hie et al.
    (Cell Systems 2017) in Python. Briefly, an initial guess on the hypercube
    side is `l` is made, and then hypercubic boxes are constructed so that they are
    contiguous if possible. If a box is empty it is discarded. Two non-adjacent
    boxes can exist at a distance that is not necessarily a multiple of `l`.
    The final number of boxes is counted. The algorithm then proceeds by
    binary search increasing or decreasing `l` according to the number of boxes.
    If the desired number of boxes `k` +/- `k * alpha` is reached, the algorithm
    stops. The final result is an assignment of each cell to a hypercubic
    region of a defined side `l`, which can be used to estimate the density as
    `(number of points) / l^(number of dimensions)`.
}
